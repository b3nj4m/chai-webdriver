{"name":"Chai-webdriver","tagline":"Build more expressive integration tests with webdriver sugar for chai.js","body":"Provides [selenium-webdriver](https://npmjs.org/package/selenium-webdriver) sugar for the [Chai](http://chaijs.com/) assertion library. Allows you to create expressive integration tests:\r\n\r\n```javascript\r\nexpect('.frequency-field').dom.to.contain.text('One time')\r\nexpect('.toggle-pane').dom.to.not.be.visible()\r\n```\r\n\r\n## What sorts of assertions can we make?\r\n\r\nAll assertions start with a [Sizzle-compatible css selector](http://sizzlejs.com/), for example:\r\n\r\n```javascript\r\nexpect('.list')\r\nexpect('div > h1')\r\nexpect('a[href=http://google.com]')\r\n```\r\n\r\nThen we add the dom flag, like so:\r\n\r\n```javascript\r\nexpect(selector).dom\r\n```\r\n\r\nFinally, we can add our assertion to the chain:\r\n\r\n### Text\r\nTest the text value of the dom against supplied string. Exact matches only.\r\n```javascript\r\nexpect(selector).dom.to.have.text('string')\r\n```\r\n\r\n### Text (contain)\r\nTest the text value of the dom against supplied string. Partial matches allowed.\r\n```javascript\r\nexpect(selector).dom.to.contain.text('string')\r\n```\r\n\r\n### Match\r\nTest the text value of the dom against the regular expression.\r\n```javascript\r\nexpect(selector).dom.to.match(/regex/)\r\n```\r\n\r\n### Text (regex)\r\nTest the text value of the dom against the regular expression. (Same as `match` above).\r\n```javascript\r\nexpect(selector).dom.to.have.text(/regex/)\r\n```\r\n\r\n### Visible\r\nCheck whether or not the element is visible on-screen\r\n```javascript\r\nexpect(selector).dom.to.be.visible()\r\n```\r\n\r\n### Disabled\r\nCheck whether or not the form element is disabled\r\n```javascript\r\nexpect(selector).dom.to.be.disabled()\r\n```\r\n\r\n### Count\r\nTest how many elements exist in the dom with the supplied selector\r\n```javascript\r\nexpect(selector).dom.to.have.count(number)\r\n```\r\n\r\n### Style\r\nTest the CSS style of the element (exact string match).\r\n```javascript\r\nexpect(selector).dom.to.have.style('property', 'value')\r\n```\r\n\r\n### Value\r\nTest the value of a form field against supplied string.\r\n```javascript\r\nexpect(selector).dom.to.have.value('string')\r\n```\r\n\r\n### HTML Class\r\nTests that the element has `warning` as one of its class attributes.\r\n```javascript\r\nexpect(selector).dom.to.have.htmlClass('warning')\r\n```\r\n\r\n### Attribute\r\nTest an element's attribute value. Exact matches only. By omitting `value` test simply checks for existance of attribute.\r\n```javascript\r\nexpect(selector).dom.to.have.attribute('attribute', 'value')\r\n```\r\n\r\n### Not\r\nYou can also always add a `not` in there to negate the assertion:\r\n\r\n```javascript\r\nexpect(selector).dom.not.to.have.style('property', 'value')\r\n```\r\n\r\n\r\n### Larger and smaller\r\n\r\nSeveral of the assertion methods support the `larger` and `smaller` properties, which allow numeric comparisons. e.g. for `value()`:\r\n\r\nTest for a numeric value larger (>=) than 0.\r\n```javascript\r\nexpect('input[type=number]').dom.to.have.larger.value(0)\r\n```\r\n\r\nTest for a numeric value smaller (<=) than 0.\r\n```javascript\r\nexpect('input[type=number]').dom.to.have.smaller.value(0)\r\n```\r\n\r\nTest for a numeric value not larger (<) than 0.\r\n```javascript\r\nexpect('input[type=number]').dom.not.to.have.larger.value(0)\r\n```\r\n\r\nTest for a numeric value not smaller (>) than 0.\r\n```javascript\r\nexpect('input[type=number]').dom.not.to.have.smaller.value(0)\r\n```\r\n\r\nOther methods which support `larger` and `smaller`:\r\n\r\nTest for text with length larger (>=) than 0.\r\n```javascript\r\nexpect(selector).dom.to.have.larger.text(0)\r\n```\r\n\r\nTest for number of elements matching `selector` larger (>=) than 0.\r\n```javascript\r\nexpect(selector).dom.to.have.larger.count(0)\r\n```\r\n\r\nTest for css attribute value larger (>=) than 0 (ignores units).\r\n```javascript\r\nexpect(selector).dom.to.have.larger.style('width', 0)\r\n```\r\n\r\nTest for attribute value larger (>=) than 0.\r\n```javascript\r\nexpect(selector).dom.to.have.larger.attribute('offsetWidth', 0)\r\n```\r\n\r\n\r\n### Eventually\r\n\r\nYou can also add an `eventually` to tell `chai-webdriver` to poll for the selected elements up to the configured timeout (see Setup below):\r\n\r\n```javascript\r\nexpect(selector).dom.to.eventually.have.htmlClass('warning')\r\n```\r\n\r\n\r\n### Everything returns a promise\r\n\r\nAll of these assertions return a `Q` promise, so you can just return the promise if you're using mocha.\r\n\r\n\r\n## Setup\r\n\r\nSetup is pretty easy. Just:\r\n\r\n```javascript\r\n\r\n// Start with a webdriver instance:\r\nvar sw = require('selenium-webdriver');\r\nvar driver = new sw.Builder()\r\n  .withCapabilities(sw.Capabilities.chrome())\r\n  .build()\r\n\r\n//optional timeout in ms to use with eventually (defaults to 1000)\r\nvar timeout = 15000;\r\n\r\n// And then...\r\nvar chai = require('chai');\r\nvar chaiWebdriver = require('chai-webdriver');\r\nchai.use(chaiWebdriver(driver, timeout));\r\n\r\n// And you're good to go!\r\nchai.describe('kitty test', function() {\r\n  chai.before(function(done) {\r\n    driver.get('http://github.com').then(done);\r\n  });\r\n  it('should not find a kitty', function() {\r\n    return chai.expect('#site-container h1.heading').dom.to.not.contain.text(\"I'm a kitty!\");\r\n  });\r\n});\r\n```\r\n\r\n## Contributing\r\n\r\nso easy.\r\n\r\n```bash\r\n$EDITOR index.js      # edit index.js\r\nnpm test              # run the specs\r\n```\r\n\r\n## License\r\n\r\nMIT.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}